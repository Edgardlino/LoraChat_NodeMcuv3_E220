/*
 * Sketch Temporário para CONFIGURAR Módulos E220
 * Carregue este sketch em CADA UM dos NodeMCUs (um de cada vez)
 * para garantir que ambos têm a mesma configuração.
 */

#include "Arduino.h"
#include <SoftwareSerial.h> // **Adicionado Include**
#include "LoRa_E220.h"

// --- Pinos do LoRa (Hardware <-> NodeMCU) ---
// **Use os pinos corretos para o seu NodeMCU**
#define LORA_RX_PIN 12 // D6
#define LORA_TX_PIN 14 // D5
#define LORA_M0_PIN 16 // D0
#define LORA_M1_PIN 15 // D8
#define LORA_AUX_PIN 13 // D7

// **Use a SoftwareSerial como nos seus sketches**
SoftwareSerial loraSerial(LORA_RX_PIN, LORA_TX_PIN);
LoRa_E220 e220ttl(&loraSerial, LORA_AUX_PIN, LORA_M0_PIN, LORA_M1_PIN);

void printParameters(struct Configuration configuration);

void setup() {
  Serial.begin(115200); // **Aumentado baud rate para corresponder aos seus sketches**
  while(!Serial){};
  delay(1000); // Aumentado delay inicial

  Serial.println("Iniciando Configuração do E220...");

  // Startup all pins and UART
  e220ttl.begin();

  // --- Lê a configuração ATUAL ---
  Serial.println("\n--- Lendo Configuração ATUAL ---");
  ResponseStructContainer c_read;
  c_read = e220ttl.getConfiguration();
  if (c_read.status.code == E220_SUCCESS) {
      Configuration current_config = *(Configuration*) c_read.data;
      printParameters(current_config);
  } else {
      Serial.println("Falha ao ler configuração atual!");
      Serial.println(c_read.status.getResponseDescription());
  }
  c_read.close();
  delay(500); // Pequena pausa

  // --- Prepara a NOVA Configuração ---
  Serial.println("\n--- Definindo NOVA Configuração ---");
  // Cria uma estrutura de configuração local
  Configuration new_configuration;
  // Define os parâmetros desejados (Baseado no exemplo "FIXED SENDER/RECEIVER")

  new_configuration.ADDL = 0x00; // Endereço Baixo = 0 (para ambos)
  new_configuration.ADDH = 0x00; // Endereço Alto = 0 (para ambos)

  new_configuration.CHAN = 65;   // Canal = 65 (para ambos)

  // Velocidades (importante que sejam iguais)
  new_configuration.SPED.uartBaudRate = UART_BPS_9600;   // Baud rate da comunicação com NodeMCU (padrão)
  new_configuration.SPED.airDataRate = AIR_DATA_RATE_010_24; // Velocidade no ar (padrão 2.4kbps)
  new_configuration.SPED.uartParity = MODE_00_8N1;     // Paridade (padrão 8N1)

  // Opções
  new_configuration.OPTION.subPacketSetting = SPS_200_00; // Tamanho do pacote (padrão 200 bytes)
  new_configuration.OPTION.RSSIAmbientNoise = RSSI_AMBIENT_NOISE_DISABLED; // Ruído RSSI desligado
  new_configuration.OPTION.transmissionPower = POWER_22; // Potência máxima (ou ajuste conforme necessário)

  // Modo de Transmissão
  new_configuration.TRANSMISSION_MODE.enableRSSI = RSSI_DISABLED;         // RSSI desligado por agora
  new_configuration.TRANSMISSION_MODE.fixedTransmission = FT_FIXED_TRANSMISSION; // **Modo Fixo**
  new_configuration.TRANSMISSION_MODE.enableLBT = LBT_DISABLED;            // Listen Before Talk desligado
  new_configuration.TRANSMISSION_MODE.WORPeriod = WOR_2000_011;            // Ciclo WOR (padrão 2000ms)


  // --- Aplica a NOVA Configuração ---
  // Define a configuração e guarda permanentemente (WRITE_CFG_PWR_DWN_SAVE)
  ResponseStatus rs = e220ttl.setConfiguration(new_configuration, WRITE_CFG_PWR_DWN_SAVE);
  Serial.print("Resultado da gravação: ");
  Serial.println(rs.getResponseDescription());
  Serial.print("Código: ");
  Serial.println(rs.code);
  delay(500); // Delay após gravação

  // --- Lê a configuração NOVAMENTE para confirmar ---
  Serial.println("\n--- Lendo Configuração APÓS Gravação ---");
  ResponseStructContainer c_confirm;
  c_confirm = e220ttl.getConfiguration();
  if (c_confirm.status.code == E220_SUCCESS) {
      Configuration confirmed_config = *(Configuration*) c_confirm.data;
      printParameters(confirmed_config);
  } else {
      Serial.println("Falha ao ler configuração após gravação!");
      Serial.println(c_confirm.status.getResponseDescription());
  }
  c_confirm.close();

  Serial.println("\nConfiguração concluída. Pode carregar o sketch original.");
}

void loop() {
  // Nada a fazer no loop
}

// Função para imprimir parâmetros (copiada do exemplo)
void printParameters(struct Configuration configuration) {
  Serial.println("----------------------------------------");
  Serial.print(F("HEAD : "));  Serial.print(configuration.COMMAND, HEX);Serial.print(" ");Serial.print(configuration.STARTING_ADDRESS, HEX);Serial.print(" ");Serial.println(configuration.LENGHT, HEX);
  Serial.println(F(" "));
  Serial.print(F("AddH : "));  Serial.println(configuration.ADDH, HEX);
  Serial.print(F("AddL : "));  Serial.println(configuration.ADDL, HEX);
  Serial.println(F(" "));
  Serial.print(F("Chan : "));  Serial.print(configuration.CHAN, DEC); Serial.print(" -> "); Serial.println(configuration.getChannelDescription());
  Serial.println(F(" "));
  Serial.print(F("SpeedParityBit   : "));  Serial.print(configuration.SPED.uartParity, BIN);Serial.print(" -> "); Serial.println(configuration.SPED.getUARTParityDescription());
  Serial.print(F("SpeedUARTBaudRate: "));  Serial.print(configuration.SPED.uartBaudRate, BIN);Serial.print(" -> "); Serial.println(configuration.SPED.getUARTBaudRateDescription());
  Serial.print(F("SpeedAirDataRate : "));  Serial.print(configuration.SPED.airDataRate, BIN);Serial.print(" -> "); Serial.println(configuration.SPED.getAirDataRateDescription());
  Serial.println(F(" "));
  Serial.print(F("OptionSubPacket  : "));  Serial.print(configuration.OPTION.subPacketSetting, BIN);Serial.print(" -> "); Serial.println(configuration.OPTION.getSubPacketSetting());
  Serial.print(F("OptionTxPower    : "));  Serial.print(configuration.OPTION.transmissionPower, BIN);Serial.print(" -> "); Serial.println(configuration.OPTION.getTransmissionPowerDescription());
  Serial.print(F("OptionRSSINoise  : "));  Serial.print(configuration.OPTION.RSSIAmbientNoise, BIN);Serial.print(" -> "); Serial.println(configuration.OPTION.getRSSIAmbientNoiseEnable());
  Serial.println(F(" "));
  Serial.print(F("TransModeWOR     : "));  Serial.print(configuration.TRANSMISSION_MODE.WORPeriod, BIN);Serial.print(" -> "); Serial.println(configuration.TRANSMISSION_MODE.getWORPeriodByParamsDescription());
  Serial.print(F("TransModeLBT     : "));  Serial.print(configuration.TRANSMISSION_MODE.enableLBT, BIN);Serial.print(" -> "); Serial.println(configuration.TRANSMISSION_MODE.getLBTEnableByteDescription());
  Serial.print(F("TransModeRSSI    : "));  Serial.print(configuration.TRANSMISSION_MODE.enableRSSI, BIN);Serial.print(" -> "); Serial.println(configuration.TRANSMISSION_MODE.getRSSIEnableByteDescription());
  Serial.print(F("TransModeType    : "));  Serial.print(configuration.TRANSMISSION_MODE.fixedTransmission, BIN);Serial.print(" -> "); Serial.println(configuration.TRANSMISSION_MODE.getFixedTransmissionDescription());
  Serial.println("----------------------------------------");
}